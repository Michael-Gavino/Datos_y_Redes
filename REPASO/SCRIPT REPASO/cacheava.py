import time

class CDN:
    """
    Clase CDN (Content Delivery Network)
    ------------------------------------
    Esta clase simula el comportamiento b√°sico de una red de entrega de contenido.
    Permite obtener contenido desde un servidor de origen y almacenarlo en una cach√© local
    para servirlo m√°s r√°pido en futuras solicitudes, evitando acceder al servidor cada vez.

    Atributos:
        cache (dict): Diccionario que almacena contenido en cach√© con su marca de tiempo.
        max_cache_size (int): Tama√±o m√°ximo permitido de la cach√©.
        cache_expiration (int): Tiempo m√°ximo que un contenido puede permanecer en cach√© (en segundos).
    """

    def __init__(self, max_cache_size, cache_expiration):
        """
        Inicializa el CDN con un tama√±o m√°ximo de cach√© y un tiempo de expiraci√≥n.

        Args:
            max_cache_size (int): N√∫mero m√°ximo de elementos que puede almacenar la cach√©.
            cache_expiration (int): Tiempo en segundos que un contenido puede permanecer en cach√©.
        """
        self.cache = {}  # Almacenar√° el contenido en forma {url: (contenido, timestamp)}
        self.max_cache_size = max_cache_size
        self.cache_expiration = cache_expiration
    
    def get_content(self, url):
        """
        Obtiene el contenido solicitado desde la cach√© o el servidor de origen.

        - Si el contenido est√° en la cach√© y no ha expirado, se devuelve desde la cach√©.
        - Si ha expirado o no est√° en cach√©, se obtiene del servidor de origen y se almacena.

        Args:
            url (str): URL del contenido solicitado.

        Returns:
            str: Contenido obtenido (desde cach√© o servidor).
        """
        if url in self.cache:
            # Si la URL est√° en cach√©, verificar si ha expirado
            content, timestamp = self.cache[url]
            if time.time() - timestamp < self.cache_expiration:
                print("‚úÖ Contenido servido desde la cach√©")
                return content
            else:
                print("‚ö†Ô∏è Cach√© expirada, obteniendo nuevo contenido")
                self.cache.pop(url)  # Eliminar contenido expirado
        
        # Si no est√° en cach√© o ha expirado, se obtiene del servidor de origen
        content = self.fetch_from_origin(url)
        self.add_to_cache(url, content)  # Guardar en cach√© para futuras solicitudes
        return content
    
    def fetch_from_origin(self, url):
        """
        Simula la obtenci√≥n del contenido desde el servidor de origen.

        Args:
            url (str): URL del contenido solicitado.

        Returns:
            str: Contenido obtenido del servidor de origen.
        """
        print(f"üåê Obteniendo contenido desde el servidor de origen para {url}...")
        time.sleep(2)  # Simula el tiempo de respuesta del servidor
        return f"Contenido de {url}"
    
    def add_to_cache(self, url, content):
        """
        Agrega un nuevo contenido a la cach√©.

        - Si la cach√© est√° llena, elimina el contenido m√°s antiguo.

        Args:
            url (str): URL asociada al contenido.
            content (str): Contenido a almacenar.
        """
        if len(self.cache) >= self.max_cache_size:
            self.evict_cache()  # Si la cach√© est√° llena, eliminar el m√°s antiguo
        self.cache[url] = (content, time.time())  # Guardar con la hora actual
    
    def evict_cache(self):
        """
        Elimina la entrada de cach√© m√°s antigua para liberar espacio.
        """
        oldest_url = min(self.cache, key=lambda k: self.cache[k][1])  # Buscar la m√°s antigua
        print(f"üóëÔ∏è Eliminando cach√© para {oldest_url}")
        self.cache.pop(oldest_url)
    
    def __str__(self):
        """
        Representaci√≥n en cadena del estado actual de la cach√©.

        Returns:
            str: Representaci√≥n de la cach√©.
        """
        return str(self.cache)

def main():
    """
    Funci√≥n principal del programa.
    --------------------------------
    Crea una instancia del CDN y permite al usuario interactuar con √©l desde la terminal.
    Comandos disponibles:
        - 'get': Solicitar contenido desde una URL (se obtiene desde la cach√© o el servidor).
        - 'exit': Salir del programa.
    """
    cdn = CDN(max_cache_size=3, cache_expiration=10)  # Crear CDN con 3 elementos y 10 seg de expiraci√≥n
    
    while True:
        command = input("Ingrese comando (get, exit): ")  # Solicitar comando
        
        if command == 'get':
            url = input("Ingrese la URL para obtener el contenido: ")
            content = cdn.get_content(url)  # Obtener contenido
            print(content)
        elif command == 'exit':
            print("üö™ Saliendo del programa...")
            break
        else:
            print("‚ùå Comando inv√°lido. Intente con 'get' o 'exit'.")

# Ejecutar la funci√≥n principal si el archivo se ejecuta directamente
if __name__ == "__main__":
    main()

